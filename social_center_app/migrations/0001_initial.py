# Generated by Django 3.0.8 on 2020-07-15 18:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(max_length=40, verbose_name='Отчество')),
                ('position', models.CharField(max_length=60, verbose_name='Должность')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Child',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.TextField(verbose_name='фио')),
                ('sex', models.IntegerField(choices=[(1, 'мужской'), (2, 'женский')], verbose_name='пол')),
                ('birthdate', models.DateField(verbose_name='дата рождения')),
                ('age', models.IntegerField(verbose_name='возраст')),
                ('status', models.IntegerField(choices=[(1, 'родной'), (2, 'усыновлен'), (3, 'оформлена опека'), (4, 'оставшийся без попечения родителей/лишение родительских прав'), (5, 'сирота'), (6, 'инвалидность')], verbose_name='статус ребенка')),
                ('location', models.IntegerField(choices=[(1, 'в семье'), (2, 'больница'), (3, 'дом ребенка')], verbose_name='место нахождения ребенка')),
                ('documents', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='наличие документов у ребенка')),
                ('fatherhood', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='установлено ли отцовство на ребенка')),
                ('education', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='посещает ли образовательное учреждение')),
                ('educational_institution', models.TextField(blank=True, null=True, verbose_name='какое образовательное учреждение')),
                ('educate_child', models.IntegerField(choices=[(1, 'да'), (2, 'нет'), (3, 'подписала временный отказ'), (4, 'подписала полный отказ'), (5, 'ушла из родильного дома'), (6, 'собирается подписывать временный отказ'), (7, 'собирается подписывать полный отказ')], verbose_name='планирует ли воспитывать ребенка')),
                ('reason_refusal', models.IntegerField(choices=[(1, 'отсутствие жилья'), (2, 'употребление наркотиков'), (3, 'низкая материальная обеспеченность'), (4, 'физическое или психическое заболевание'), (5, 'отсутствие семейной поддержки'), (6, 'нежелательная беременность')], verbose_name='возможные причины отказа')),
            ],
            options={
                'verbose_name': 'Ребенок',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='№')),
                ('code', models.TextField(blank=True, null=True, verbose_name='код')),
                ('came', models.TextField(blank=True, null=True, verbose_name='пришли')),
                ('dependence', models.TextField(blank=True, null=True, verbose_name='зависимость')),
                ('number_vz', models.IntegerField(blank=True, null=True, verbose_name='количество вз')),
                ('nl', models.TextField(blank=True, null=True, verbose_name='н/л')),
                ('criminal_record', models.TextField(blank=True, null=True, verbose_name='наличие судимости')),
                ('state_dependence', models.TextField(blank=True, null=True, verbose_name='состояние зависимости')),
                ('employment', models.TextField(blank=True, null=True, verbose_name='трудовая занятость')),
                ('hiv_status', models.TextField(blank=True, null=True, verbose_name='ВИЧ-статус')),
                ('vzr', models.TextField(blank=True, null=True, verbose_name='взр')),
                ('number_children', models.IntegerField(blank=True, null=True, verbose_name='количетсво детей')),
                ('undefined', models.TextField(blank=True, null=True, verbose_name='неопределен')),
                ('in_window', models.TextField(blank=True, null=True, verbose_name='в окне')),
                ('full_name', models.TextField(blank=True, null=True, verbose_name='ФИО клиента')),
                ('boy', models.TextField(blank=True, null=True, verbose_name='мал.')),
                ('girl', models.TextField(blank=True, null=True, verbose_name='дев.')),
                ('man', models.TextField(blank=True, null=True, verbose_name='муж.')),
                ('woman', models.TextField(blank=True, null=True, verbose_name='жен.')),
                ('category', models.TextField(blank=True, null=True, verbose_name='категория')),
                ('address_phone', models.TextField(blank=True, null=True, verbose_name='адрес, телефон')),
                ('passport', models.TextField(blank=True, null=True, verbose_name='паспортные данные')),
                ('production_date', models.DateField(blank=True, null=True, verbose_name='дата постановки')),
                ('support', models.TextField(blank=True, null=True, verbose_name='какое сопровождение')),
                ('children', models.TextField(blank=True, null=True, verbose_name='дети (фио)')),
                ('mo', models.TextField(blank=True, null=True, verbose_name='м/о')),
                ('question', models.TextField(blank=True, null=True, verbose_name='?')),
            ],
            options={
                'verbose_name': 'Клиент',
            },
        ),
        migrations.CreateModel(
            name='FamilyMembersInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maritalStatus', models.IntegerField(choices=[(1, 'не замужем'), (2, 'замужем'), (3, 'разведена'), (4, 'вдова')], verbose_name='Семейное положение')),
                ('withWhomLiving', models.IntegerField(choices=[(1, 'одна'), (2, 'с детьми'), (3, 'со своими родителями'), (4, 'с родителями мужа/партнёра'), (5, 'с родственниками'), (6, 'с мужем'), (7, 'с партнёром'), (8, 'с друзьями')], verbose_name='С кем проживает')),
                ('regularPartner', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Постоянный партнёр')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
            ],
            options={
                'verbose_name': 'Сведения о членах семьи',
            },
        ),
        migrations.CreateModel(
            name='SocialEconomicCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('income_level', models.IntegerField(choices=[(1, 'высокий уровень'), (2, 'около двух прожиточных минимумов на человека'), (3, 'на уровне прожиточного минимума'), (4, 'ниже прожиточного минимума'), (5, 'нет дохода')], verbose_name='уровень доходов клиента')),
                ('income_confirmation', models.IntegerField(blank=True, choices=[(1, 'возможно подтвердить документально'), (2, 'необходим сбор документов'), (3, 'невозможно подтвердить документально')], null=True, verbose_name='возможность подтверждения дохода ниже прожиточного минимума')),
                ('client_security', models.IntegerField(blank=True, choices=[(1, 'достаточное с учетом возраста и потребностей ребенка'), (2, 'удовлетворительное'), (3, 'недостаточное')], null=True, verbose_name='обеспеченность клиентки и ее детей полноценным питанием,одеждой,обувью,предметами личной гигиены')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
            ],
            options={
                'verbose_name': 'Социально экономические условия проживания',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testName', models.CharField(max_length=300, verbose_name='Имя теста')),
                ('typeTest', models.IntegerField(verbose_name='Тип теста')),
            ],
            options={
                'verbose_name': 'Тест',
            },
        ),
        migrations.CreateModel(
            name='SourceIncome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary', models.IntegerField(blank=True, choices=[(1, 'постоянно'), (2, 'переодически'), (3, 'редко')], null=True, verbose_name='заработная плата')),
                ('alimony', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='алименты/нотариальное соглашение о содержании ребенка')),
                ('material_means', models.IntegerField(blank=True, choices=[(1, 'родственниками'), (2, 'партнером'), (3, 'мужем')], null=True, verbose_name='предоставление материальных средств')),
                ('rent', models.IntegerField(blank=True, choices=[(1, 'комнаты'), (2, 'оборудования'), (3, 'участка')], null=True, verbose_name='сдача в аренду')),
                ('benefits', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='льготы по коммунальным услугам')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.SocialEconomicCondition')),
            ],
            options={
                'verbose_name': 'Источники дохода',
            },
        ),
        migrations.CreateModel(
            name='SocialPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basis_social_payments', models.IntegerField(choices=[(1, 'нет оснований для оформления выплаты'), (2, 'имеется право на выплату'), (3, 'требует оформления'), (4, 'находится в стадии оформления'), (5, 'выплачивается')], verbose_name='основания для соациальных выплат')),
                ('pension', models.IntegerField(blank=True, choices=[(1, 'по старости'), (2, 'по потере кормильца'), (3, 'по инвалидности')], null=True, verbose_name='пенсия')),
                ('type_social_payment', models.IntegerField(blank=True, choices=[(1, 'единовременные выплаты'), (2, 'ежемесячные выплаты'), (3, 'государственная социальная помощь,доплата до прожиточного минимума'), (4, 'государственная социальная помощь в трудной жизненной ситуации')], null=True, verbose_name='вид социальной выплаты')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.SocialEconomicCondition')),
            ],
            options={
                'verbose_name': 'Социальные выплаты',
            },
        ),
        migrations.CreateModel(
            name='SocialLivingCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_room', models.IntegerField(choices=[(1, 'жилой дом'), (2, 'отдельная квартира'), (3, 'комната в коммунальной квартире'), (4, 'комната в общежитии'), (5, 'отсутствует')], verbose_name='вид жилого помещения')),
                ('sanitary_condition', models.IntegerField(blank=True, choices=[(1, 'хорошее'), (2, 'удовлетворительное'), (3, 'антисанитарное'), (4, 'признаки аварийности жилого помещения')], null=True, verbose_name='санитарно-гигиеническое и техническое состояние жилого помещения')),
                ('room_area', models.FloatField(blank=True, null=True, verbose_name='жилая площадь в расчете на человека (кв.м.)')),
                ('ownership', models.IntegerField(blank=True, choices=[(1, 'договор по найму жилья'), (2, 'договор аренды'), (3, 'собственность клиента')], null=True, verbose_name='право собственности,владения и пользования')),
                ('payment', models.IntegerField(blank=True, choices=[(1, 'своевременно в полном объеме'), (2, 'незначительная задолженность'), (3, 'значительная задолженность'), (4, 'начилие задолженности по алиментам/кредиту')], null=True, verbose_name='оплата за жилье и коммунальные услуги')),
                ('amount_debt', models.DecimalField(blank=True, decimal_places=2, max_digits=17, null=True, verbose_name='сумма задолженности (в рублях)')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
            ],
            options={
                'verbose_name': 'Социально бытовые условия',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formulation', models.TextField()),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Test')),
            ],
            options={
                'verbose_name': 'Вопрос',
            },
        ),
        migrations.CreateModel(
            name='PossibleAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answerQuestion', models.TextField()),
                ('numberOfPoints', models.IntegerField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Question')),
            ],
            options={
                'verbose_name': 'Вариант ответа',
            },
        ),
        migrations.CreateModel(
            name='PassingTheTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attemptNumber', models.IntegerField(verbose_name='Номер попытки')),
                ('date', models.DateField(auto_now_add=True, verbose_name='дата прохождения')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Прохождение теста',
            },
        ),
        migrations.CreateModel(
            name='Interpretation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interpretation', models.TextField()),
                ('passingTheTest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.PassingTheTest')),
            ],
            options={
                'verbose_name': 'Интерпретация',
            },
        ),
        migrations.CreateModel(
            name='HusbandInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullName', models.TextField(max_length=50, verbose_name='ФИО мужа/партнёра')),
                ('adress', models.TextField(max_length=50, verbose_name='Адрес')),
                ('telephoneNumber', models.TextField(max_length=15, verbose_name='Телефон')),
                ('dod', models.DateField(verbose_name='Дата рождения')),
                ('age', models.IntegerField(verbose_name='Возраст')),
                ('workPlace', models.IntegerField(choices=[(1, 'постоянное'), (2, 'временное'), (3, 'эпизодическое'), (4, 'не работает'), (5, 'состоит в центре занятости населения в качестве безработного')], verbose_name='Место работы')),
                ('aboutWork', models.TextField(blank=True, null=True, verbose_name='Где, кем работает (при наличии работы)')),
                ('aboutNoWork', models.TextField(blank=True, null=True, verbose_name='Причина, по которой не работает')),
                ('avDoc', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Наличие документов')),
                ('cityzenship', models.IntegerField(choices=[(1, 'Россия'), (2, 'страна СНГ')], verbose_name='Гражданство')),
                ('registration', models.IntegerField(choices=[(1, 'постоянная'), (2, 'временная')], verbose_name='Регистрация')),
                ('placeOfRegistration', models.IntegerField(choices=[(1, 'Санкт-Петербург'), (2, 'Ленинградская область'), (3, 'другой регион РФ'), (4, 'страна СНГ')], verbose_name='Место регистрации')),
                ('education', models.IntegerField(choices=[(1, 'полное среднее (11 классов)'), (2, 'общее среднее (9 классов)'), (3, 'неоконченное общее среднее'), (4, 'начальная школа')], verbose_name='Образование')),
                ('professionalEducation', models.IntegerField(choices=[(1, 'высшее'), (2, 'неоконченное высшее'), (3, 'среднее специальное'), (4, 'начальное профессиональное'), (5, 'отсутствует'), (6, 'обучается')], verbose_name='Профессиональное образование')),
                ('specialSocialStatus', models.IntegerField(choices=[(1, 'мнвалидность'), (2, 'многодетная семья'), (3, 'одинокая мать'), (4, 'лицо из чмсла детей сирот и детей, оставшихся без попечения родителей')], verbose_name='Особый социальный статус')),
                ('disabilityGroup', models.IntegerField(choices=[(1, 'I группа'), (2, 'II группа'), (3, 'III группа')], verbose_name='Группа инвалидности')),
                ('drugUse', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Употребление наркотиков')),
                ('frequencyOfDrugsUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], null=True, verbose_name='Частота употребления наркотиков')),
                ('durationOfUse', models.DecimalField(blank=True, decimal_places=2, max_digits=2, null=True, verbose_name='Длительность употрбления (в годах)')),
                ('kindOfDrug', models.TextField(blank=True, null=True, verbose_name='Вид наркотика')),
                ('theTreatmentWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли лечение(наркотики)')),
                ('psychologicalRehabilitationWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли психологическую реабилитацию(наркотики)')),
                ('durationOfRemissionD', models.DecimalField(blank=True, decimal_places=2, max_digits=2, null=True, verbose_name='Длительность ремиссии (в годах)(наркотики)')),
                ('alcoholUse', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Употрбление алкоголя')),
                ('frequencyOfAlcoholUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], null=True, verbose_name='Частота употрбления алкоголя')),
                ('alcoholDrinksType', models.IntegerField(blank=True, choices=[(1, 'слабоалкогольные'), (2, 'сильноалкогольные')], null=True, verbose_name='Вид алкогольных напитков')),
                ('theTreatmentWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли лечение(алкоголь)')),
                ('psychologicalRehabilitationWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли психологическую реабилитацию(алкоголь)')),
                ('durationOfRemissionA', models.DecimalField(blank=True, decimal_places=2, max_digits=2, null=True, verbose_name='Длительность ремиссии (в годах)(алкоголь)')),
                ('accountingInNarcologicalClinic', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Учёт в наркологическом диспансере')),
                ('criminalRecord', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Наличие судимости')),
                ('husband', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.FamilyMembersInformation')),
            ],
            options={
                'verbose_name': 'Информация о муже/партнёре',
            },
        ),
        migrations.CreateModel(
            name='HealthChild',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='ребенок родился здоровым')),
                ('withdrawal_symptoms', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='в абстинентном синдроме')),
                ('with_mother', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='ребенок выписан из родильного отделения вместе с матерью')),
                ('hiv_status_child', models.IntegerField(choices=[(1, 'ВИЧ-положительный'), (2, 'ВИЧ-отрицательный'), (3, 'не установлен')], verbose_name='ВИЧ-статус ребенка')),
                ('hiv_plus', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='родился после установления ВИЧ-положительного статуса клиента')),
                ('center_aids', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='учет в центре СПИД')),
                ('center_prevention', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='учет в лечебно-профилактическом учреждении района')),
                ('hiv_prevention', models.IntegerField(choices=[(1, 'во время родов'), (2, 'после родов'), (3, 'не знает')], verbose_name='получал ли профилактику вич')),
                ('child', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Child')),
            ],
            options={
                'verbose_name': 'Информация о состоянии здоровья ребенка',
            },
        ),
        migrations.CreateModel(
            name='GeneralInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sex', models.IntegerField(choices=[(1, 'мужской'), (2, 'женский')], verbose_name='пол')),
                ('dod', models.DateField(verbose_name='дата рождения')),
                ('age', models.IntegerField(verbose_name='возраст')),
                ('workPlace', models.IntegerField(choices=[(1, 'постоянное'), (2, 'временное'), (3, 'эпизодическое'), (4, 'не работает'), (5, 'состоит в центре занятости населения в качестве безработного')], verbose_name='место работы')),
                ('aboutWork', models.TextField(blank=True, null=True, verbose_name='Где, кем работает (при наличии работы)')),
                ('aboutNoWork', models.TextField(blank=True, null=True, verbose_name='Причина, по которой не работает')),
                ('avDoc', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Наличие документов')),
                ('cityzenship', models.IntegerField(choices=[(1, 'Россия'), (2, 'страна СНГ')], verbose_name='Гражданство')),
                ('registration', models.IntegerField(choices=[(1, 'постоянная'), (2, 'временная')], verbose_name='Регистрация')),
                ('placeOfRegistration', models.IntegerField(choices=[(1, 'Санкт-Петербург'), (2, 'Ленинградская область'), (3, 'другой регион РФ'), (4, 'страна СНГ')], verbose_name='Место регистрации')),
                ('education', models.IntegerField(choices=[(1, 'полное среднее (11 классов)'), (2, 'общее среднее (9 классов)'), (3, 'неоконченное общее среднее'), (4, 'начальная школа')], verbose_name='Образование')),
                ('professionalEducation', models.IntegerField(choices=[(1, 'высшее'), (2, 'неоконченное высшее'), (3, 'среднее специальное'), (4, 'начальное профессиональное'), (5, 'отсутствует'), (6, 'обучается')], verbose_name='Профессиональное образование')),
                ('specialSocialStatus', models.IntegerField(choices=[(1, 'мнвалидность'), (2, 'многодетная семья'), (3, 'одинокая мать'), (4, 'лицо из чмсла детей сирот и детей, оставшихся без попечения родителей')], verbose_name='Особый социальный статус')),
                ('disabilityGroup', models.IntegerField(choices=[(1, 'I группа'), (2, 'II группа'), (3, 'III группа')], verbose_name='Группа инвалидности')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
            ],
            options={
                'verbose_name': 'Общая информация',
            },
        ),
        migrations.CreateModel(
            name='Facilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basis_facilities', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='основания для льгот')),
                ('right_facilities', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='имеет право на льготы (указать)')),
                ('stage_registration_facilities', models.IntegerField(blank=True, choices=[(1, 'оформлено полностью'), (2, 'частично оформлено'), (3, 'в стадии оформления'), (4, 'не оформлено')], null=True, verbose_name='стадия оформления льгот')),
                ('reason', models.TextField(blank=True, null=True, verbose_name='причина,по которой не оформлены льготы')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.SocialEconomicCondition')),
            ],
            options={
                'verbose_name': 'Льготы и меры социальной поддержки,предусмотренные для определенных категорий',
            },
        ),
        migrations.CreateModel(
            name='ExpertOpinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otherInformation', models.TextField(verbose_name='Другие сведения о клиенте и членах семьи, сообщённые во время диагностического интервью')),
                ('expectations', models.TextField(verbose_name='Ожидания клиента от помощи социальной службы (запрос)')),
                ('personaImpressions', models.TextField(verbose_name='Личные впечатления специалиста от взаимодействия с клиентом')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Заключение специалиста',
            },
        ),
        migrations.CreateModel(
            name='ChronicDisease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hepatitisC', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Гепатит С')),
                ('HIVStatus', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='ВИЧ-статус')),
                ('estimatedTimeOfInfection', models.DecimalField(blank=True, decimal_places=2, max_digits=2, null=True, verbose_name='Предположительное время инфицирования (в годах)')),
                ('estimatedRouteOfInfection', models.IntegerField(blank=True, choices=[(1, 'половой'), (2, 'инъекционный'), (3, 'неизвестно')], null=True, verbose_name='Предположительный путь заражения')),
                ('AIDSCenter', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Учёт в центре СПИД')),
                ('doesCenterVisitAIDS', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Посещает ли центр СПИД')),
                ('frequencyOfVisitsAIDSCenter', models.TextField(blank=True, max_length=20, null=True, verbose_name='Как часто посещает центр СПИД')),
                ('receivedChemoprophylaxis', models.IntegerField(blank=True, choices=[(1, 'во время беременности'), (2, 'во время родов'), (3, 'после родов')], null=True, verbose_name='Получал химиопрофилактику')),
                ('HIVGetTreatment', models.IntegerField(blank=True, choices=[(1, 'да, регулярно'), (2, 'да, не регулярно'), (3, 'нет')], null=True, verbose_name='Получает ли лечение по ВИЧ')),
                ('reasonForNotGettingTreatment', models.TextField(blank=True, max_length=50, null=True, verbose_name='Причина, по которой не получает лечение ВИЧ')),
                ('whoKnow', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'подозревают'), (4, 'планирует рассказать')], null=True, verbose_name='Кто из членов семьи знает о ВИЧ-статусе клиента')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
            ],
            options={
                'verbose_name': 'Информация о наличии хронического заболевания',
            },
        ),
        migrations.CreateModel(
            name='ChildAllowanceAndCompensation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basis_payments', models.IntegerField(choices=[(1, 'нет оснований для оформления выплаты'), (2, 'имеется право на выплату'), (3, 'требует оформления'), (4, 'находится в стадии оформления'), (5, 'выплачивается')], verbose_name='основания для выплаты')),
                ('type_benefit_payment', models.IntegerField(blank=True, choices=[(1, 'единовременная компенсационная выплата при рождении ребенка (СПБ)'), (2, 'единовременное пособие при рождении ребенка (РФ)'), (3, 'ежемесячное пособие на ребёнка в возрасте от рождения до 1 года (СПб)'), (4, 'ежемесячное пособие на ребёнка в возрасте от 1 года до 7 лет (СПб)'), (5, 'ежемесячное пособие на детей школьного возраста (СПб)'), (6, 'пособие по беременности и родам (РФ)'), (7, 'единовременное пособие женщинам, вставшим на учёт в ранние сроки (РФ)'), (8, 'ежемесячное пособие по уходу за ребёнком (РФ)'), (9, 'сертификат на получение материнского (семейного) капитала')], null=True, verbose_name='вид пособия/компенсационной выплаты')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.SocialEconomicCondition')),
            ],
            options={
                'verbose_name': 'Детские пособия и компенсационные выплаты',
            },
        ),
        migrations.AddField(
            model_name='child',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client'),
        ),
        migrations.CreateModel(
            name='ASocialBehavior',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drugUse', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Употребление наркотиков')),
                ('frequencyOfDrugsUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], null=True, verbose_name='Частота употребления наркотиков')),
                ('durationOfUse', models.DecimalField(blank=True, decimal_places=2, max_digits=2, null=True, verbose_name='Длительность употрбления (в годах)')),
                ('kindOfDrug', models.TextField(blank=True, null=True, verbose_name='Вид наркотика')),
                ('theTreatmentWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли лечение(наркотики)')),
                ('psychologicalRehabilitationWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли психологическую реабилитацию(наркотики)')),
                ('durationOfRemissionD', models.DecimalField(blank=True, decimal_places=2, max_digits=2, null=True, verbose_name='Длительность ремиссии (в годах)(наркотики)')),
                ('alcoholUse', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Употрбление алкоголя')),
                ('frequencyOfAlcoholUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], null=True, verbose_name='Частота употрбления алкоголя')),
                ('alcoholDrinksType', models.IntegerField(blank=True, choices=[(1, 'слабоалкогольные'), (2, 'сильноалкогольные')], null=True, verbose_name='Вид алкогольных напитков')),
                ('theTreatmentWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли лечение(алкоголь)')),
                ('psychologicalRehabilitationWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли психологическую реабилитацию(алкоголь)')),
                ('durationOfRemissionA', models.DecimalField(blank=True, decimal_places=2, max_digits=2, null=True, verbose_name='Длительность ремиссии (в годах)(алкоголь)')),
                ('accountingInNarcologicalClinic', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Учёт в наркологическом диспансере')),
                ('criminalRecord', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Наличие судимости')),
                ('accountingInODN_RUVD', models.IntegerField(choices=[(1, 'да'), (2, 'нет'), (3, 'не знаю')], verbose_name='Учёт в ОДН РУВД')),
                ('caseExaminedInKDN_ZP', models.IntegerField(choices=[(1, 'да'), (2, 'нет'), (3, 'не знаю')], verbose_name='Рассматривалось дело на КДН и ЗП')),
                ('commercialSexExperience', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Опыт коммерческого секса')),
                ('physicalAbuseExperience', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Опыт физического насилия')),
                ('fromHwomPhysical', models.IntegerField(blank=True, choices=[(1, 'муж/партнёр'), (2, 'другого родственника')], null=True, verbose_name='Со стороны кого')),
                ('experienceSexualAbuse', models.IntegerField(choices=[(1, 'да'), (2, 'нет')], verbose_name='Опыт сексуального насилия')),
                ('fromHwomSexual', models.IntegerField(blank=True, choices=[(1, 'муж/партнёр'), (2, 'другого родственника')], null=True, verbose_name='Со стороны кого')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.Client')),
            ],
            options={
                'verbose_name': 'Информация о противоправных действиях, правонарушениях, употреблении наркотиков, алкоголя',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openAnswer', models.TextField(blank=True, null=True)),
                ('passingTheTest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.PassingTheTest')),
                ('possibleAnswer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.PossibleAnswer')),
            ],
            options={
                'verbose_name': 'Ответ',
            },
        ),
    ]
