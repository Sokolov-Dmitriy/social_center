# Generated by Django 3.1 on 2020-11-05 21:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=60, null=True, verbose_name='Отчество')),
                ('position', models.CharField(blank=True, max_length=80, null=True, verbose_name='Должность')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateOfInterview', models.DateField(blank=True, default=None, null=True, verbose_name='Дата проведения интервью')),
                ('code', models.TextField(blank=True, default=None, null=True, verbose_name='Код клиента')),
                ('formOfReferral', models.IntegerField(blank=True, choices=[(1, 'самообращение'), (2, 'КДН и ЗП'), (3, 'органы опеки и попечительства'), (4, 'образовательные учреждения'), (5, 'дом ребёнка'), (6, 'родильный дом'), (7, 'женская консультация'), (8, 'детская поликлиника'), (9, 'центр СПИД'), (10, 'отдел полиции'), (11, 'УФСИН'), (12, 'перевод'), (13, 'СО НКО')], default=None, null=True, verbose_name='Форма обращения')),
                ('placementSocialSupport', models.IntegerField(blank=True, choices=[(1, 'консилиум'), (2, 'приказ')], default=None, null=True, verbose_name='Постановка на социальное сопровождение')),
                ('DateOfCreationIPSO', models.DateField(blank=True, default=None, null=True, verbose_name='Дата разработки ИППСУ')),
                ('IPPSNumber', models.TextField(blank=True, default=None, null=True, verbose_name='Номер ИППСУ')),
                ('ContractPeriod', models.DateField(blank=True, default=None, null=True, verbose_name='Срок действия договора')),
                ('contractNumber', models.TextField(blank=True, default=None, null=True, verbose_name='Номер договора')),
                ('full_name', models.TextField(blank=True, default=None, null=True, verbose_name='ФИО клиента')),
                ('sex', models.IntegerField(blank=True, choices=[(1, 'мужской'), (2, 'женский')], default=None, null=True, verbose_name='Пол')),
                ('dod', models.DateField(blank=True, default=None, null=True, verbose_name='Дата рождения')),
                ('age', models.IntegerField(blank=True, default=None, null=True, verbose_name='Возраст')),
                ('passSeries', models.IntegerField(blank=True, default=None, null=True, verbose_name='Серия паспорта')),
                ('passNumber', models.IntegerField(blank=True, default=None, null=True, verbose_name='Номер паспорта')),
                ('passFromWhomIssue', models.TextField(blank=True, default=None, null=True, verbose_name='Выдан')),
                ('passDateIssue', models.DateField(blank=True, default=None, null=True, verbose_name='Дата выдачи')),
                ('registrationAddressCity', models.TextField(blank=True, default=None, null=True, verbose_name='Населенный пункт (АР)')),
                ('registrationAddressStreet', models.TextField(blank=True, default=None, null=True, verbose_name='Улица (АР)')),
                ('registrationAddressHouseNum', models.TextField(blank=True, default=None, null=True, verbose_name='Дом (АР)')),
                ('registrationAddressApNum', models.TextField(blank=True, default=None, null=True, verbose_name='Номер квартиры (АР)')),
                ('registrationAddressIndex', models.IntegerField(blank=True, default=None, null=True, verbose_name='Почтовый индекс (АР)')),
                ('registrationMunicipalDistrict', models.IntegerField(blank=True, choices=[(1, 'Юго-Запад'), (2, 'Южно-Приморский'), (3, 'Сосновая Поляна'), (4, 'Урицк'), (5, 'Константиновское'), (6, 'Горелово'), (7, 'г.Красное Село')], default=None, null=True, verbose_name='Муниципальный округ (АР)')),
                ('actualAddressCity', models.TextField(blank=True, default=None, null=True, verbose_name='Населенный пункт (АФП)')),
                ('actualAddressStreet', models.TextField(blank=True, default=None, null=True, verbose_name='Улица (АФП)')),
                ('actualAddressHouseNum', models.TextField(blank=True, default=None, null=True, verbose_name='Дом (АФП)')),
                ('actualAddressApNum', models.TextField(blank=True, default=None, null=True, verbose_name='Номер квартиры (АФП)')),
                ('actualAddressIndex', models.IntegerField(blank=True, default=None, null=True, verbose_name='Почтовый индекс (АФП)')),
                ('actualMunicipalDistrict', models.IntegerField(blank=True, choices=[(1, 'Юго-Запад'), (2, 'Южно-Приморский'), (3, 'Сосновая Поляна'), (4, 'Урицк'), (5, 'Константиновское'), (6, 'Горелово'), (7, 'г.Красное Село')], default=None, null=True, verbose_name='Муниципальный округ (АФП)')),
                ('phoneNumber', models.TextField(blank=True, default=None, max_length=15, null=True, verbose_name='Номер телефона')),
                ('dependence', models.IntegerField(blank=True, choices=[(1, 'алкогольная'), (2, 'наркотическая'), (3, 'опыт употребления'), (4, 'созависимость')], default=None, null=True, verbose_name='Зависимость')),
                ('stateOfDependence', models.IntegerField(blank=True, choices=[(1, 'активное потребление'), (2, 'ремиссия')], default=None, null=True, verbose_name='Состояние зависимости')),
                ('adultsCount', models.IntegerField(blank=True, default=None, null=True, verbose_name='Кол-во взрослых')),
                ('minorsCount', models.IntegerField(blank=True, default=None, null=True, verbose_name='Кол-во несовершеннолетних')),
                ('workPlace', models.IntegerField(blank=True, choices=[(1, 'постоянное'), (2, 'временное'), (3, 'эпизодическое'), (4, 'не работает'), (5, 'состоит в центре занятости населения в качестве безработного')], default=None, null=True, verbose_name='Место работы')),
                ('aboutWork', models.TextField(blank=True, default=None, null=True, verbose_name='Где, кем работает (при наличии работы)')),
                ('aboutNoWork', models.TextField(blank=True, default=None, null=True, verbose_name='Причина, по которой не работает')),
                ('avDoc', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Наличие документов')),
                ('cityzenship', models.IntegerField(blank=True, choices=[(1, 'Россия'), (2, 'страна СНГ')], default=None, null=True, verbose_name='Гражданство')),
                ('registration', models.IntegerField(blank=True, choices=[(1, 'постоянная'), (2, 'временная')], default=None, null=True, verbose_name='Регистрация')),
                ('placeOfRegistration', models.IntegerField(blank=True, choices=[(1, 'Санкт-Петербург'), (2, 'Ленинградская область'), (3, 'другой регион РФ'), (4, 'страна СНГ')], default=None, null=True, verbose_name='Место регистрации')),
                ('education', models.IntegerField(blank=True, choices=[(1, 'высшее'), (2, 'неоконченное высшее'), (3, 'среднее специальное'), (4, 'начальное профессиональное'), (5, 'обучается'), (6, 'полное среднее (11 классов)'), (7, 'общее среднее (9 классов)'), (8, 'неоконченное общее среднее'), (9, 'начальная школа')], default=None, null=True, verbose_name='Образование')),
                ('familiesCategory', models.IntegerField(blank=True, choices=[(1, 'полная семья'), (2, 'одинокий родитель'), (3, 'многодетная семья'), (4, 'разведённые'), (5, 'беженцы / переселенцы'), (6, 'несовершеннолетние родители'), (7, 'замещающая семья'), (8, 'семья с инвалидом'), (9, 'другое')], default=None, null=True, verbose_name='Категория семей')),
                ('disability', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Инвалидность')),
                ('escort', models.IntegerField(blank=True, choices=[(1, 'интенсивное'), (2, 'поддерживающее'), (3, 'мониторинг')], default=None, null=True, verbose_name='Какое сопровождение')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='SocialEconomicCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('income_level', models.IntegerField(blank=True, choices=[(1, 'высокий уровень'), (2, 'около двух прожиточных минимумов на человека'), (3, 'на уровне прожиточного минимума'), (4, 'ниже прожиточного минимума'), (5, 'нет дохода')], null=True, verbose_name='Уровень доходов клиента')),
                ('income_confirmation', models.IntegerField(blank=True, choices=[(1, 'возможно подтвердить документально'), (2, 'необходим сбор документов'), (3, 'невозможно подтвердить документально')], null=True, verbose_name='Возможность подтверждения дохода ниже прожиточного минимума')),
                ('client_security', models.IntegerField(blank=True, choices=[(1, 'достаточное с учетом возраста и потребностей ребенка'), (2, 'удовлетворительное'), (3, 'недостаточное')], null=True, verbose_name='Обеспеченность клиентки и ее детей полноценным питанием,одеждой,обувью,предметами личной гигиены')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Социально экономические условия проживания',
                'verbose_name_plural': 'Социально экономические условия проживания',
            },
        ),
        migrations.CreateModel(
            name='TestBoyko',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aggressiveness', models.IntegerField(choices=[(0, 'дружелюбен, не наносит вреда себе и другим'), (1, 'грубоват, замкнут, но не наносит вреда себе и другим'), (2, 'грубо, фамильярно разговаривает, публично оскорбляет других, ломает или портит вещи, попадает в аварии, случайно наносит себе порезы, травмы'), (3, 'высказывает угрозы, дерётся; когда волнуется, может сам себя порезать, прижечь сигаретой; может быть статья за неумышленное нанесение повреждений людям или имуществу (115 или 118 УК РФ)'), (4, 'частые угрозы, драки, причинение другим и себе физического вреда (БДСМ практики, самопорезы, употребление алкоголя с целью «убить печень» и т.д.); может быть статья за умышленное причинение вреда другим людям или порчи имущества (111 УК РФ)')], verbose_name='1. Агрессивность/аутоагрессивность')),
                ('alarm', models.IntegerField(choices=[(0, 'ровный фон настроения'), (1, 'настроение немного снижено, лёгкая тревога или раздражительность; не жалуется на плохое настроение, но при расспросе оно выявляется'), (2, 'жалуется на возникающее время от времени плохое настроение, тревогу, раздражительность'), (3, 'плохое настроение, тревога, резкие колебания настроения, страдание на лице, в мимике, позе'), (4, 'постоянно плохое настроение («все плохо», «все черное»), плохое самочувствие, плохой сон, аппетит, сильная тревога, апатия («все безразлично», «ничего не хочу»), лицо без мимики, подавленный вид и голос')], verbose_name='2. Тревога и депрессия')),
                ('memory_disorder', models.IntegerField(choices=[(0, 'ясное мышление, хорошая память, хорошее понимание речи специалиста и умственная работоспособность'), (1, 'ухудшение памяти и мышления при долгой нагрузке, забывает важную информацию и не может ее вспомнить, отвлекается, «выпадает» из беседы '), (2, 'вялое мышление, много говорит о несущественных деталях, нарушена память на текущие события или на события прошлого, утомляется при нагрузке'), (3, 'застревает на одной мысли и постоянное ее повторяет, или постоянно перескакивает с мысли на мысль; временами не понимает, что говорит специалист; теряется, когда надо проанализировать и решить ситуацию; примитивно судит о жизни'), (4, 'не может вспомнить недавние события, с трудом запоминает новую информацию; не может сосредоточить внимание, понять, что ему говорит специалист; ошибочно размышляет или вообще не способен к размышлению; ведет себя так, словно не понимает, где находится и что происходит; не может планировать даже ближайшее будущее')], verbose_name='3. Нарушения памяти, мышления, истощаемость')),
                ('criticism', models.IntegerField(choices=[(0, 'полностью осознает свое состояние; может смотреть на себя и свою зависимость со стороны; видит последствия своих действий'), (1, 'частично понимает своё состояния, поведение и заболевание; не всегда может посмотреть на себя со стороны; не видит связи между своими действиями и последствиями'), (2, 'поверхностное понимание своего положения: на словах может говорить о своей ответственности и анализировать свое поведение, но это мало влияет на результат'), (3, 'сниженное понимание своего состояния и поведения; не видит связи между своим поведением и его последствиями'), (4, 'стойкая утрата понимания своего состояния и поведения')], verbose_name='4.Способность критически воспринимать свое состояние и поведение')),
                ('self_service', models.IntegerField(choices=[(0, 'содержит себя, свою одежду, жилище в чистоте и порядке'), (1, 'кратковременные затруднения в самообслуживании, о которых известно только очень близким людям'), (2, 'способен к самообслуживанию, но делает это по минимуму: одежда может быть с небольшими пятнами и измятой, волосы не расчесаны, но относительно чистые, запаха нет'), (3, 'периодически возникают трудности в самообслуживании, одежда и внешний вид не опрятные, но базовые навыки гигиены сохранны'), (4, 'не соблюдает правил гигиены и не поддерживает порядок в жилище, не справляется с самообслуживанием и нуждается в помощи других людей')], verbose_name='5. Способности к самообслуживанию')),
                ('work_activity', models.IntegerField(choices=[(0, 'есть постоянная работа, понимает необходимость работать, положительно оценивается коллегами'), (1, 'есть постоянная работа, понимает необходимость работать; если затруднения в работе возникают, то они кратковременны и о них известно только близким людям'), (2, 'конфликты с коллегами по работе, не приводящие к потере работы; периодические прогулы на работе (в том числе из-за похмелья); с трудом удерживается на работе, часто меняет работу, но не остается без неё'), (3, 'выбирает работу в «пьющем» коллективе или не способен сохранить рабочее место; вместо постоянной работы разовые подработки'), (4, 'нет работы, не способен её самостоятельно найти и выполнять')], verbose_name='6. Трудовая (профессиональная) деятельность')),
                ('friends', models.IntegerField(choices=[(0, 'поддерживает контакты с друзьями/знакомыми, способен к эмоциональной привязанности'), (1, 'временные затруднения в контактах с друзьями/знакомыми, хотя есть эмоциональная привязанность'), (2, 'сужение контактов, общается с людьми, злоупотребляющими алкоголем или наркотиками, проблемы очевидны любому человеку'), (3, 'частые конфликты с друзьями/знакомыми, родственниками; круг общения снижен до уровня необходимого (чаще потребительского)'), (4, 'не способен поддерживать контакты с друзьями, знакомыми; отсутствуют социальные связи')], verbose_name='7. Контакты с друзьями, знакомыми')),
                ('family_relation', models.IntegerField(choices=[(0, 'есть семья, желание её иметь и сохранять'), (1, 'есть семья и желание её сохранить, хотя имеются кратковременные трудности в отношениях'), (2, 'конфликты с родственниками, членами семьи, не приводящие к потере контакта с семьей'), (3, 'частые конфликты с членами семьи и близкими, приводящие к долгой разлуке, потере семьи'), (4, 'нет семьи; отсутствует желание иметь и сохранять семью')], verbose_name='8. Семейные отношения')),
                ('child_parent', models.IntegerField(choices=[(0, 'поддерживает престарелых родителей/несовершеннолетних детей финансово и психологически'), (1, 'есть кратковременные трудности в отношениях с родителями/детьми, о которых известно только очень близким людям'), (2, 'отношение к родителям/детям противоречивое: то заботится, то как будто «забывает» о своей ответственности'), (3, 'формальное отношение к родителям/детям, нет эмоциональной привязанности к ним, тратит деньги только на свои нужды'), (4, 'нет семьи; не заботится о членах семьи, детях даже на минимальном уровне')], verbose_name='9. Забота о детях/родителях')),
                ('leisure', models.IntegerField(choices=[(0, 'в свободное время занимается разнообразными социально-приемлемыми интересами и деятельностью'), (1, 'способен планировать свое свободное время, имеет стабильные интересы, а затруднения в этом носят кратковременный характер'), (2, 'довольно бедная сфера  интересов, снижен познавательный интерес, нет стойких интересов, отдых в основном пассивный и однообразный'), (3, 'свободное время проводит пассивно (например, просмотр телевизора), не знает, чем себя занять; иногда может употреблять алкоголь или наркотики, курить, чтобы занять время; говорит о необходимости «убивать время»'), (4, 'свободное время посвящено поиску и употреблению алкоголя или наркотиков, другие интересы и увлечения отсутствуют')], verbose_name='10. Сфера досуга')),
                ('attempt', models.IntegerField(choices=[(1, 'Первичная'), (2, 'Вторичная')], verbose_name='Диагностика')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Тест Бойко',
                'verbose_name_plural': 'Тесты Бойко',
            },
        ),
        migrations.CreateModel(
            name='TypologicalGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.IntegerField(choices=[(0, 'Клиент не может быть относен к типологической группе потребителей ПАВ'), (1, 'Группа 1 «Женщины, активно употребляющие ПАВ, противопоставляющие себя социуму»'), (2, 'Группа 2 «Женщины, употребляющие ПАВ с более развитым коммуникативным потенциалом»')], verbose_name='Основная типологическая группа')),
                ('subgroup', models.IntegerField(blank=True, choices=[(1, 'Группа 2.1 «Молодые женщины с социально-бытовыми проблемами в период неактивного употребления ПАВ»'), (2, 'Группа 2.2 «Женщины с длительным стажем употребления ПАВ и сопутствующими социально-медицинскими проблемами»')], null=True, verbose_name='Подгруппа типологической группы 2')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
                ('test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.testboyko')),
            ],
            options={
                'verbose_name': 'Типологическая группа',
                'verbose_name_plural': 'Типологические группы',
            },
        ),
        migrations.CreateModel(
            name='TestSOCRATES',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changes', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='1. Я действительно хочу внести изменения, связанные с употреблением алкоголя/наркотиков, в свой образ жизни')),
                ('doubt', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='2. Иногда я сомневаюсь, действительно ли я алкоголик/наркоман')),
                ('aggravation', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='3. Если я не изменю свой образ жизни, связанный с употреблением алкоголя/наркотиков, в ближайшее время, мои проблемы могут усугубиться')),
                ('make_changes', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='4. Я уже начал вносить изменения, связанные с употреблением алкоголя/наркотиков, в свой образ жизни')),
                ('too_much', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='5. Одно время я употреблял слишком много алкоголя/наркотиков, но мне удалось с этим справиться')),
                ('harm', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='6. Иногда меня интересует, приношу ли я, употребляя алкоголь/наркотики, вред другим людям')),
                ('serious_problem', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='7. У меня серьёзные проблемы алкоголем/наркотиками')),
                ('changes_lifestyle', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='8. Я не только думаю об изменениях в образе жизни, связанных с употреблением алкоголя/наркотиков, но уже кое-что делаю')),
                ('hold', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='9. Я уже изменил свой образ жизни, связанный с употреблением алкоголя/наркотиков, и ищу способы, как удержаться от возвращения к старым привычкам')),
                ('know_trouble', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='10. Я знаю, что у меня проблемы с алкоголем/наркотиками')),
                ('control', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='11. Иногда я задаю себе вопрос, контролирую ли я употребление мной алкоголя/наркотиков')),
                ('much_harm', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='12. Мой образ жизни, связанный с употреблением алкоголя/наркотиков, приносит много вреда')),
                ('reduce_stop', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='13. Сейчас я предпринимаю активные попытки сократить или прекратить употребление алкоголя/наркотиков')),
                ('help', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='14. Я хочу получить помощь, чтобы не возвращаться к проблемам, которые я ранее имел из-за алкоголя/наркотиков')),
                ('have_problem', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='15. У меня проблемы с алкоголем/наркотиками')),
                ('use_lot', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='16. Иногда я задаю себе вопрос, не употребляю ли я слишком много алкоголя/наркотиков')),
                ('alcoholic', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='17. Я – алкоголик/наркоман')),
                ('try_my_best', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='18. Я стараюсь изо всех сил, чтобы изменить свой образ жизни, связанный с употреблением алкоголя/наркотиков')),
                ('move_on', models.IntegerField(choices=[(1, 'Полностью не согласен'), (2, 'Не согласен'), (3, 'Не уверен'), (4, 'Согласен'), (5, 'Полностью согласен')], verbose_name='19. Я уже внёс изменения, связанные с употреблением алкоголя/наркотиков в мой образ жизни, и я нуждаюсь в помощи, чтобы двигаться в этом направлении дальше')),
                ('attempt', models.IntegerField(choices=[(1, 'Первичная'), (2, 'Вторичная')], verbose_name='Диагностика')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Тест SOCRATES',
                'verbose_name_plural': 'Тесты SOCRATES',
            },
        ),
        migrations.CreateModel(
            name='TestGAGE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alcohol', models.IntegerField(choices=[(0, 'Нет'), (1, 'Да')], verbose_name='1. Злоупотребляли ли Вы алкоголем?')),
                ('substances', models.IntegerField(choices=[(0, 'Нет'), (1, 'Да (за исключением лекарств, выписанные врачом)')], verbose_name='2. Пробовали ли Вы какие-нибудь вещества, изменяющие настроение и состояние, кроме алкоголя?')),
                ('loss_documents', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='3.1. Бывали ли в Вашей жизни ситуации, когда вы теряли документы и(или) деньги, когда выпьете или употребите другие вещества, меняющие состояние?')),
                ('loss_documents_when', models.IntegerField(blank=True, choices=[(0, 'Больше года назад'), (1, 'За последний год ')], null=True, verbose_name='3.1.1. Когда последний раз?')),
                ('loss_documents_time', models.IntegerField(blank=True, choices=[(0, 'Один раз'), (2, 'Больше одного')], null=True, verbose_name='3.1.2. Было ли такое один раз в вашей жизни?')),
                ('do_not_work', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='3.2. Бывали ли в Вашей жизни ситуации, когда Вы не могли выйти на работу из-за похмелья или состояния опьянения?')),
                ('do_not_work_when', models.IntegerField(blank=True, choices=[(0, 'Больше года назад'), (1, 'Меньше года назад')], null=True, verbose_name='3.2.1. Когда последний раз?')),
                ('loss_loved_ones', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='3.3. Теряли ли Вы отношения с друзьями или любовные, потому что Ваш друг или партнер были недовольны вашими отношениями с алкоголем?')),
                ('fight', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='3.4. Бывало ли, что Вы вступали в драку или Вас били, когда Вы были в состоянии алкогольного опьянения?')),
                ('injuries', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Травмы серьезнее синяков'), (3, 'Попадал в больницу из-за травм, полученных в состоянии опьянения')], null=True, verbose_name='3.5. Получали ли Вы травмы в состоянии алкогольного опьянения?')),
                ('lots_alcohol', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='3.6. Бывало ли, что Вы выпивали больше полбутылки водки, или бутылки вина или полутора литров пива за один раз (за один вечер)?')),
                ('lots_alcohol_time', models.IntegerField(blank=True, choices=[(0, 'Менее одного раза в полгода'), (1, 'Более одного раза в полгода, реже раза в неделю'), (2, 'Каждую неделю'), (3, 'Каждый день')], null=True, verbose_name='3.6.1. Как часто такое случается?')),
                ('drink_alcohol_time', models.IntegerField(blank=True, choices=[(0, 'Реже одного раза в неделю'), (1, 'Чаще одного раза в неделю'), (2, 'Каждый день или «почти каждый день»')], null=True, verbose_name='3.7. Как часто Вы пьете алкогольные напитки, хотя бы чуть-чуть?')),
                ('try_substances', models.TextField(blank=True, null=True, verbose_name='3.8. Какие вещества, влияющие на настроение и изменяющие сознание, кроме алкоголя Вы пробовали?')),
                ('try_substances_choice', models.IntegerField(blank=True, choices=[(1, 'Одно наименование'), (2, 'Два и более наименований')], null=True, verbose_name='Какое количество наименований?')),
                ('how_use', models.IntegerField(blank=True, choices=[(1, 'Курил, нюхал, глотал'), (2, 'Внутримышечные инъекции'), (3, 'Внутривенные инъекции'), (3, 'Всё выше перечисленное')], null=True, verbose_name='3.9. Каким способом Вы употребляли наркотические или токсические вещества (назвать то, что клиент отвечал на вопрос 3.8.)?')),
                ('difficulties', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='3.10. Бывали ли трудности на работе или в личных отношениях, когда Вы были под действием веществ или  потому, что другие люди были слишком обеспокоены Вашей увлеченностью наркотическим веществом?')),
                ('poor_health', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да'), (3, 'Да, требовалась медицинская помощь')], null=True, verbose_name='3.11. Бывало ли, что Вы себя плохо чувствовали после употребления наркотического вещества (в момент опьянения или после выхода) (сильное сердцебиение, слабость, головная боль, тошнота, дискомфорт в ЖКТ)?')),
                ('company', models.IntegerField(blank=True, choices=[(1, 'В компании'), (2, 'В одиночку'), (2, 'В компании и в одиночку')], null=True, verbose_name='3.12. употребляли ли Вы вещества, меняющие настроение, один или в компании?')),
                ('dose_reduction', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='4.1. Вы думали когда-нибудь о том, чтобы уменьшить  количество употребляемого алкоголя (наркотических веществ)?')),
                ('irritation', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='4.2. Вас раздражает, если люди критикуют Вас за употребление алкоголя (употребление наркотиков)?')),
                ('fault', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='4.3. Вы испытывали когда-нибудь чувство вины по поводу употребления алкоголя (наркотиков)?')),
                ('tone', models.IntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Да')], null=True, verbose_name='4.4. Вы когда-нибудь употребляли алкоголь (наркотические вещества) для поднятия тонуса утром или с похмелья?')),
                ('attempt', models.IntegerField(choices=[(1, 'Первичная'), (2, 'Вторичная')], verbose_name='Диагностика')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Тест GAGE',
                'verbose_name_plural': 'Тесты GAGE',
            },
        ),
        migrations.CreateModel(
            name='SourceIncome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary', models.IntegerField(blank=True, choices=[(1, 'постоянно'), (2, 'переодически'), (3, 'редко')], null=True, verbose_name='Заработная плата')),
                ('alimony', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Алименты/нотариальное соглашение о содержании ребенка')),
                ('material_means', models.IntegerField(blank=True, choices=[(1, 'родственниками'), (2, 'партнером'), (3, 'мужем')], null=True, verbose_name='Предоставление материальных средств')),
                ('rent', models.IntegerField(blank=True, choices=[(1, 'комнаты'), (2, 'оборудования'), (3, 'участка')], null=True, verbose_name='Сдача в аренду')),
                ('benefits', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Льготы по коммунальным услугам')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.socialeconomiccondition')),
            ],
            options={
                'verbose_name': 'Источники дохода',
                'verbose_name_plural': 'Источники дохода',
            },
        ),
        migrations.CreateModel(
            name='SocialPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basis_social_payments', models.IntegerField(blank=True, choices=[(1, 'нет оснований для оформления выплаты'), (2, 'имеется право на выплату'), (3, 'требует оформления'), (4, 'находится в стадии оформления'), (5, 'выплачивается')], null=True, verbose_name='Основания для социальных выплат')),
                ('pension', models.IntegerField(blank=True, choices=[(1, 'по старости'), (2, 'по потере кормильца'), (3, 'по инвалидности')], null=True, verbose_name='Пенсия')),
                ('type_social_payment', models.IntegerField(blank=True, choices=[(1, 'единовременные выплаты'), (2, 'ежемесячные выплаты'), (3, 'государственная социальная помощь,доплата до прожиточного минимума'), (4, 'государственная социальная помощь в трудной жизненной ситуации')], null=True, verbose_name='Вид социальной выплаты')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.socialeconomiccondition')),
            ],
            options={
                'verbose_name': 'Социальные выплаты',
                'verbose_name_plural': 'Социальные выплаты',
            },
        ),
        migrations.CreateModel(
            name='SocialLivingCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_room', models.IntegerField(blank=True, choices=[(1, 'жилой дом'), (2, 'отдельная квартира'), (3, 'комната в коммунальной квартире'), (4, 'комната в общежитии'), (5, 'отсутствует')], null=True, verbose_name='Вид жилого помещения')),
                ('sanitary_condition', models.IntegerField(blank=True, choices=[(1, 'хорошее'), (2, 'удовлетворительное'), (3, 'антисанитарное'), (4, 'признаки аварийности жилого помещения')], null=True, verbose_name='Санитарно-гигиеническое и техническое состояние жилого помещения')),
                ('room_area', models.FloatField(blank=True, null=True, verbose_name='Жилая площадь (кв.м.)')),
                ('ownership', models.IntegerField(blank=True, choices=[(1, 'договор по найму жилья'), (2, 'собственность клиента'), (3, 'собственность родственников')], null=True, verbose_name='Право собственности,владения и пользования')),
                ('payment', models.IntegerField(blank=True, choices=[(1, 'своевременно в полном объеме'), (2, 'незначительная задолженность'), (3, 'значительная задолженность')], null=True, verbose_name='Оплата за жилье и коммунальные услуги')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Социально бытовые условия',
                'verbose_name_plural': 'Социально бытовые условия',
            },
        ),
        migrations.CreateModel(
            name='InterpretationSOCRATES',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_points_realization', models.IntegerField(verbose_name='Общее количество баллов Осознания')),
                ('realization', models.IntegerField(choices=[(35, 'высокое осознание проблем с алкоголем/наркотиками, признаёт проблемы с употреблением ПАВ, желает измениться и осознаёт, что вред от употребления ПАВ будет продолжаться, если не наступят изменения'), (31, 'среднее осознание проблем с алкоголем/наркотиками'), (27, 'низкое осознание проблем с алкоголем/наркотиками, отрицает проблемы с ПАВ, не принимает диагноз «зависимость», отсутствует желание меняться'), (7, 'очень низкое осознание проблем с алкоголем/наркотиками, отрицает проблемы с ПАВ, не принимает диагноз «зависимость», отсутствует желание меняться')], verbose_name='Осознание')),
                ('overall_points_ambivalence', models.IntegerField(verbose_name='Общее количество баллов Амбивалентности')),
                ('ambivalence', models.IntegerField(choices=[(19, 'очень высокая амбивалентность, клиент иногда задается вопросом, управляют ли он своим употреблением ПАВ, причиняет ли он другим людям боль своим употреблением, является ли он зависимым, что отражают некоторую открытость и готовность к изменениям'), (17, 'высокая амбивалентность, клиент иногда задается вопросом, управляют ли он своим употреблением ПАВ, причиняет ли он другим людям боль своим употреблением, является ли он зависимым, что отражают некоторую открытость и готовность к изменениям'), (14, 'средняя амбивалентность в отношении к алкоголю/наркотикам, редко могут возникать мысли о вреде ПАВ'), (9, 'низкая амбивалентность, клиент не задается вопросом, является ли его употребление ПАВ проблемой, не имеет сомнений и размышлений относительно своего употребления'), (4, 'очень низкая амбивалентность, клиент не задается вопросом, является ли его употребление ПАВ проблемой, не имеет сомнений и размышлений относительно своего употребления')], verbose_name='Амбивалентность')),
                ('overall_points_action', models.IntegerField(verbose_name='Общее количество баллов Действия')),
                ('action', models.IntegerField(choices=[(39, 'очень высокая готовность к действию, клиент уже предпринимает шаги для того, чтобы произвести положительные изменения в своем употреблении ПАВ и, возможно, уже имеет некоторый успех в этом; изменения находятся в стадии реализации, и клиент нуждается в поддержке или предотвращении срыва; можно говорить о положительном прогнозе'), (36, 'высокая готовность к действию, клиент уже предпринимает шаги для того, чтобы произвести положительные изменения в своем употреблении ПАВ и, возможно, уже имеет некоторый успех в этом; изменения находятся в стадии реализации, и клиент нуждается в поддержке или предотвращении срыва; можно говорить о положительном прогнозе'), (31, 'средняя готовность к действию, может предпринимать отдельные попытки к изменению в своём употреблении ПАВ'), (26, 'низкая готовность к действию, отсутствуют конкретных действий по изменению своего употребления ПАВ и малая вероятность совершения подобных действий в ближайшем будущем'), (8, 'очень низкая готовность к действию, отсутствуют конкретных действий по изменению своего употребления ПАВ и малая вероятность совершения подобных действий в ближайшем будущем')], verbose_name='Действие')),
                ('overall_points', models.IntegerField(verbose_name='Общее количество баллов')),
                ('ready_change', models.IntegerField(choices=[(19, 'в целом готовность к изменениям низкая'), (48, 'в целом готовность к изменениям ниже среднего'), (56, 'в целом готовность к изменениям средняя'), (78, 'в целом готовность к изменениям выше среднего'), (87, 'в целом готовность к изменениям высокая')], verbose_name='Готовность к изменениям')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата и время прохождения теста')),
                ('test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.testsocrates')),
            ],
            options={
                'verbose_name': 'Интерпретация теста SOCRATES',
                'verbose_name_plural': 'Интерпретации теста SOCRATES',
            },
        ),
        migrations.CreateModel(
            name='InterpretationGAGE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_points_risk_abuse', models.IntegerField(verbose_name='Общее количество баллов риска злоупотребления')),
                ('risk_abuse', models.IntegerField(choices=[(0, 'проблемы не выявлены'), (3, 'выраженные признаки злоупотребления')], verbose_name='Риск злоупотребления')),
                ('overall_points_risk_dependency', models.IntegerField(verbose_name='Общее количество баллов риска зависимости')),
                ('risk_dependency', models.IntegerField(choices=[(0, 'проблемы не выявлены'), (2, 'имеются признаки зависимости')], verbose_name='Риск зависимости')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата и время прохождения теста')),
                ('test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.testgage')),
            ],
            options={
                'verbose_name': 'Интерпретация теста GAGE',
                'verbose_name_plural': 'Интерпретации теста GAGE',
            },
        ),
        migrations.CreateModel(
            name='InterpretationBoyko',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aggressiveness', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'средняя агрессивность'), (3, 'сильная агрессивность'), (4, 'очень сильная агрессивность')], null=True, verbose_name='Агрессивность/аутоагрессивность')),
                ('alarm', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'средняя тревога и депрессия'), (3, 'сильная тревога и депрессия'), (4, 'очень сильная тревога и депрессия')], null=True, verbose_name='Тревога и депрессия')),
                ('memory_disorder', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'средне выраженные нарушения памяти, мышления, внимания'), (3, 'сильно выраженные нарушения памяти, мышления, внимания'), (4, 'очень сильно выраженные нарушения памяти, мышления, внимания')], null=True, verbose_name='Нарушения памяти, мышления, истощаемость')),
                ('criticism', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'поверхностное понимание своего положения'), (3, 'сниженное понимание своего положения'), (4, 'стойкая утрата понимания своего положения')], null=True, verbose_name='Способность критически воспринимать свое состояние и поведение')),
                ('self_service', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'обслуживает себя минимально'), (3, 'трудности самообслуживания'), (4, 'не справляется с самообслуживанием')], null=True, verbose_name='Способности к самообслуживанию')),
                ('work_activity', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'выраженные проблемы на работе, но не приводящие к её потере'), (3, 'серьёзные проблемы при работе, не позволяющие её сохранить'), (4, 'нет работы, не способен её самостоятельно найти и выполнять')], null=True, verbose_name='Трудовая (профессиональная) деятельность')),
                ('friends', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'сужение контактов с людьми'), (3, 'суженый круг общения, часты конфликты c окружающими'), (4, 'отсутствие социальных связей')], null=True, verbose_name='Контакты с друзьями, знакомыми')),
                ('family_relation', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'конфликтные отношения с родственниками'), (3, 'серьёзные конфликты с родственниками, приводящие к разрывам отношений'), (4, 'нет желания иметь/сохранять семью')], null=True, verbose_name='Семейные отношения')),
                ('child_parent', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'нестабильно проявляет заботу о детях'), (3, 'недостаточно заботится о детях'), (4, 'не заботится о детях')], null=True, verbose_name='Забота о детях/родителях')),
                ('leisure', models.IntegerField(blank=True, choices=[(0, 'проблемы не выявлены'), (1, 'проблемы не выявлены'), (2, 'бедная сфера интересов'), (3, 'пассивный досуг ("убивает время")'), (4, 'отсутствие досуга, всё время посвящено употреблению')], null=True, verbose_name='Сфера досуга')),
                ('overall_points', models.IntegerField(verbose_name='Общее количество баллов')),
                ('overall_assessment', models.IntegerField(choices=[(0, 'нормализация клинических и социальных показателей, стабильное социальное функционирование'), (11, 'частичная нормализация клинических и социальных показателей, средний уровень социального функционирования'), (21, 'частичное улучшение клинических и социальных показателей, низкий уровень социального функционирования'), (31, 'без изменений клинических и социальных показателей, крайне низкий уровень социального функционирования')], verbose_name='Общая оценка социального функционирования')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата и время прохождения теста')),
                ('test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.testboyko')),
            ],
            options={
                'verbose_name': 'Интерпретация теста Бойко',
                'verbose_name_plural': 'Интерпретации теста Бойко',
            },
        ),
        migrations.CreateModel(
            name='HusbandInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placementSocialSupport', models.IntegerField(blank=True, choices=[(1, 'консилиум'), (2, 'приказ')], default=None, null=True, verbose_name='Постановка на социальное сопровождение')),
                ('DateOfCreationIPSO', models.DateField(blank=True, default=None, null=True, verbose_name='Дата разработки ИППСУ')),
                ('IPPSNumber', models.TextField(blank=True, default=None, null=True, verbose_name='Номер ИППСУ')),
                ('ContractPeriod', models.DateField(blank=True, default=None, null=True, verbose_name='Срок действия договора')),
                ('contractNumber', models.TextField(blank=True, default=None, null=True, verbose_name='Номер договора')),
                ('fullName', models.TextField(blank=True, default=None, null=True, verbose_name='ФИО партнёра (мужа/жены)')),
                ('address', models.TextField(blank=True, default=None, null=True, verbose_name='Адрес')),
                ('telephoneNumber', models.TextField(blank=True, default=None, max_length=15, null=True, verbose_name='Телефон')),
                ('dod', models.DateField(blank=True, default=None, null=True, verbose_name='Дата рождения')),
                ('age', models.IntegerField(blank=True, default=None, null=True, verbose_name='Возраст')),
                ('workPlace', models.IntegerField(blank=True, choices=[(1, 'постоянное'), (2, 'временное'), (3, 'эпизодическое'), (4, 'не работает'), (5, 'состоит в центре занятости населения в качестве безработного')], default=None, null=True, verbose_name='Место работы')),
                ('aboutWork', models.TextField(blank=True, default=None, null=True, verbose_name='Где, кем работает (при наличии работы)')),
                ('aboutNoWork', models.TextField(blank=True, default=None, null=True, verbose_name='Причина, по которой не работает')),
                ('avDoc', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Наличие документов')),
                ('cityzenship', models.IntegerField(blank=True, choices=[(1, 'Россия'), (2, 'страна СНГ')], default=None, null=True, verbose_name='Гражданство')),
                ('registration', models.IntegerField(blank=True, choices=[(1, 'постоянная'), (2, 'временная')], default=None, null=True, verbose_name='Регистрация')),
                ('placeOfRegistration', models.IntegerField(blank=True, choices=[(1, 'Санкт-Петербург'), (2, 'Ленинградская область'), (3, 'другой регион РФ'), (4, 'страна СНГ')], default=None, null=True, verbose_name='Место регистрации')),
                ('education', models.IntegerField(blank=True, choices=[(1, 'высшее'), (2, 'неоконченное высшее'), (3, 'среднее специальное'), (4, 'начальное профессиональное'), (5, 'обучается'), (6, 'полное среднее (11 классов)'), (7, 'общее среднее (9 классов)'), (8, 'неоконченное общее среднее'), (9, 'начальная школа')], default=None, null=True, verbose_name='Образование')),
                ('categoryFamilies', models.IntegerField(blank=True, choices=[(1, 'полная семья'), (2, 'одинокий родитель'), (3, 'многодетная семья'), (4, 'разведённые'), (5, 'беженцы/переселенцы'), (6, 'несовершеннолетние родители'), (7, 'замещающая семья'), (8, 'семья с инвалидом'), (9, 'другое')], default=None, null=True, verbose_name='Категория семей')),
                ('disability', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Инвалидность')),
                ('drugUse', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Употребление наркотиков')),
                ('frequencyOfDrugsUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], default=None, null=True, verbose_name='Частота употребления наркотиков')),
                ('durationOfUse', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True, verbose_name='Длительность употребления (в годах)')),
                ('kindOfDrug', models.TextField(blank=True, default=None, null=True, verbose_name='Вид наркотика')),
                ('theTreatmentWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Проходил ли лечение(наркотики)')),
                ('psychologicalRehabilitationWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Проходил ли психологическую реабилитацию(наркотики)')),
                ('durationOfRemissionD', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True, verbose_name='Длительность ремиссии (в годах)(наркотики)')),
                ('alcoholUse', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Употребление алкоголя')),
                ('frequencyOfAlcoholUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], default=None, null=True, verbose_name='Частота употрбления алкоголя')),
                ('alcoholDrinksType', models.IntegerField(blank=True, choices=[(1, 'слабоалкогольные'), (2, 'сильноалкогольные')], default=None, null=True, verbose_name='Вид алкогольных напитков')),
                ('theTreatmentWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'химическая защита')], default=None, null=True, verbose_name='Проходил ли лечение(алкоголь)')),
                ('psychologicalRehabilitationWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Проходил ли психологическую реабилитацию(алкоголь)')),
                ('durationOfRemissionA', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=3, null=True, verbose_name='Длительность ремиссии (в годах)(алкоголь)')),
                ('accountingInNarcologicalClinic', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Учёт в наркологическом диспансере')),
                ('criminalRecord', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], default=None, null=True, verbose_name='Наличие судимости')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Информация о муже/партнёре',
                'verbose_name_plural': 'Информация о муже/партнёре',
            },
        ),
        migrations.CreateModel(
            name='FamilyMembersInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maritalStatus', models.IntegerField(blank=True, choices=[(1, 'не замужем/не женат'), (2, 'сожительство'), (3, 'замужем/женат'), (4, 'в разводе'), (5, 'вдова/вдовец')], null=True, verbose_name='Семейное положение')),
                ('withWhomLiving', models.IntegerField(blank=True, choices=[(1, 'одна/один'), (2, 'со своими родителями'), (3, 'с родителями партнёра (мужа/жены)'), (4, 'с семьёй (партнёр и дети)'), (5, 'с родственниками')], null=True, verbose_name='С кем проживает')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Сведения о членах семьи',
                'verbose_name_plural': 'Сведения о членах семьи',
            },
        ),
        migrations.CreateModel(
            name='Facilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basis_facilities', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Основания для льгот')),
                ('right_facilities', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Имеет право на льготы (указать)')),
                ('stage_registration_facilities', models.IntegerField(blank=True, choices=[(1, 'оформлено полностью'), (2, 'частично оформлено'), (3, 'в стадии оформления'), (4, 'не оформлено')], null=True, verbose_name='Стадия оформления льгот')),
                ('reason', models.TextField(blank=True, null=True, verbose_name='Причина,по которой не оформлены льготы')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.socialeconomiccondition')),
            ],
            options={
                'verbose_name': 'Льготы и меры социальной поддержки,предусмотренные для определенных категорий',
                'verbose_name_plural': 'Льготы и меры социальной поддержки,предусмотренные для определенных категорий',
            },
        ),
        migrations.CreateModel(
            name='ExpertOpinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otherInformation', models.TextField(blank=True, null=True, verbose_name='Другие сведения о клиенте и членах семьи, сообщённые во время диагностического интервью')),
                ('expectations', models.TextField(blank=True, null=True, verbose_name='Ожидания клиента от помощи социальной службы (запрос)')),
                ('personaImpressions', models.TextField(blank=True, null=True, verbose_name='Личные впечатления специалиста от взаимодействия с клиентом')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Заключение специалиста',
                'verbose_name_plural': 'Заключения специалиста',
            },
        ),
        migrations.CreateModel(
            name='ChronicDisease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hepatitisC', models.IntegerField(blank=True, choices=[(1, 'есть'), (2, 'нет')], null=True, verbose_name='Гепатит С')),
                ('HIVStatus', models.IntegerField(blank=True, choices=[(1, 'есть'), (2, 'нет')], null=True, verbose_name='ВИЧ-статус')),
                ('estimatedTimeOfInfection', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Когда узнал о диагнозе (в годах)')),
                ('estimatedRouteOfInfection', models.IntegerField(blank=True, choices=[(1, 'половой'), (2, 'инъекционный'), (3, 'неизвестно')], null=True, verbose_name='Предположительный путь заражения')),
                ('AIDSCenter', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Учёт в центре СПИД')),
                ('doesCenterVisitAIDS', models.IntegerField(blank=True, choices=[(1, 'раз в 3 месяца'), (2, 'раз в полгода'), (3, 'раз в год'), (4, 'нет')], null=True, verbose_name='Посещает ли центр СПИД')),
                ('receivedChemoprophylaxis', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Получал ли химиопрофилактику')),
                ('HIVGetTreatment', models.IntegerField(blank=True, choices=[(1, 'да, регулярно'), (2, 'да, не регулярно'), (3, 'нет')], null=True, verbose_name='Получает ли лечение по ВИЧ')),
                ('reasonForNotGettingTreatment', models.TextField(blank=True, null=True, verbose_name='Причина, по которой не получает лечение ВИЧ')),
                ('whoKnow', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'подозревают'), (4, 'планирует рассказать')], null=True, verbose_name='Кто из членов семьи знает о ВИЧ-статусе клиента')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Информация о наличии хронического заболевания',
                'verbose_name_plural': 'Информация о наличии хронического заболевания',
            },
        ),
        migrations.CreateModel(
            name='ChildAllowanceAndCompensation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basis_payments', models.IntegerField(blank=True, choices=[(1, 'нет оснований для оформления выплаты'), (2, 'имеется право на выплату'), (3, 'требует оформления'), (4, 'находится в стадии оформления'), (5, 'выплачивается')], null=True, verbose_name='Основания для выплаты')),
                ('type_benefit_payment', models.IntegerField(blank=True, choices=[(1, 'единовременная компенсационная выплата при рождении ребенка (СПБ)'), (2, 'единовременное пособие при рождении ребенка (РФ)'), (3, 'ежемесячное пособие на ребёнка в возрасте от рождения до 1 года (СПб)'), (4, 'ежемесячное пособие на ребёнка в возрасте от 1 года до 7 лет (СПб)'), (5, 'ежемесячное пособие на детей школьного возраста (СПб)'), (6, 'пособие по беременности и родам (РФ)'), (7, 'единовременное пособие женщинам, вставшим на учёт в ранние сроки (РФ)'), (8, 'ежемесячное пособие по уходу за ребёнком (РФ)'), (9, 'сертификат на получение материнского (семейного) капитала')], null=True, verbose_name='Вид пособия/компенсационной выплаты')),
                ('economic_condition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.socialeconomiccondition')),
            ],
            options={
                'verbose_name': 'Детские пособия и компенсационные выплаты',
                'verbose_name_plural': 'Детские пособия и компенсационные выплаты',
            },
        ),
        migrations.CreateModel(
            name='Child',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placementSocialSupport', models.IntegerField(blank=True, choices=[(1, 'консилиум'), (2, 'приказ')], null=True, verbose_name='Постановка на социальное сопровождение')),
                ('DateOfCreationIPSO', models.DateField(blank=True, null=True, verbose_name='Дата разработки ИППСУ')),
                ('IPPSNumber', models.TextField(blank=True, null=True, verbose_name='Номер ИППСУ')),
                ('ContractPeriod', models.DateField(blank=True, null=True, verbose_name='Срок действия договора')),
                ('contractNumber', models.TextField(blank=True, null=True, verbose_name='Номер договора')),
                ('full_name', models.TextField(blank=True, null=True, verbose_name='ФИО')),
                ('sex', models.IntegerField(blank=True, choices=[(1, 'мужской'), (2, 'женский')], null=True, verbose_name='Пол')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='Возраст')),
                ('status', models.IntegerField(blank=True, choices=[(1, 'родной'), (2, 'усыновлен'), (3, 'оформлена опека'), (4, 'оставшийся без попечения родителей/лишение родительских прав'), (5, 'сирота'), (6, 'инвалидность')], null=True, verbose_name='Статус ребенка')),
                ('location', models.IntegerField(blank=True, choices=[(1, 'в семье'), (2, 'больница'), (3, 'социальное учреждение')], null=True, verbose_name='Место нахождения ребенка')),
                ('documents', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Наличие документов у ребенка')),
                ('fatherhood', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Установлено ли отцовство на ребенка')),
                ('education', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Посещает ли образовательное учреждение')),
                ('educational_institution', models.TextField(blank=True, null=True, verbose_name='Какое образовательное учреждение')),
                ('educate_child', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'подписала временный отказ'), (4, 'подписала полный отказ'), (5, 'ушла из родильного дома'), (6, 'собирается подписывать временный отказ'), (7, 'собирается подписывать полный отказ')], null=True, verbose_name='Планирует ли воспитывать ребенка')),
                ('reason_refusal', models.IntegerField(blank=True, choices=[(1, 'отсутствие жилья'), (2, 'употребление наркотиков'), (3, 'низкая материальная обеспеченность'), (4, 'физическое или психическое заболевание'), (5, 'отсутствие семейной поддержки'), (6, 'нежелательная беременность')], null=True, verbose_name='Возможные причины отказа')),
                ('health', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Ребенок родился здоровым')),
                ('withdrawal_symptoms', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'не знаю')], null=True, verbose_name='В абстинентном синдроме')),
                ('with_mother', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'не знаю')], null=True, verbose_name='Ребенок выписан из родильного отделения вместе с матерью')),
                ('hiv_status_child', models.IntegerField(blank=True, choices=[(1, 'ВИЧ-положительный'), (2, 'ВИЧ-отрицательный'), (3, 'не установлен')], null=True, verbose_name='ВИЧ-статус ребенка')),
                ('hiv_plus', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Родился после установления ВИЧ-положительного статуса клиента')),
                ('center_aids', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Учет в центре СПИД')),
                ('hiv_prevention', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'не знаю')], null=True, verbose_name='Получал ли профилактику ВИЧ')),
                ('dependence', models.IntegerField(blank=True, choices=[(1, 'алкогольная'), (2, 'наркотическая'), (3, 'опыт употребления'), (4, 'созависимость')], null=True, verbose_name='Зависимость')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Ребенок',
                'verbose_name_plural': 'Дети',
            },
        ),
        migrations.CreateModel(
            name='ASocialBehavior',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drugUse', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Употребление наркотиков')),
                ('frequencyOfDrugsUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], null=True, verbose_name='Частота употребления наркотиков')),
                ('durationOfUse', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Длительность употребления (в годах)')),
                ('kindOfDrug', models.TextField(blank=True, null=True, verbose_name='Вид наркотика')),
                ('theTreatmentWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли лечение(наркотики)')),
                ('psychologicalRehabilitationWasD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли психологическую реабилитацию(наркотики)')),
                ('wherePsyRehWasD', models.TextField(blank=True, null=True, verbose_name='Где проходил реабилитацию(наркотики)?')),
                ('durationOfRemissionD', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Длительность ремиссии (в годах)(наркотики)')),
                ('alcoholUse', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Употребление алкоголя')),
                ('frequencyOfAlcoholUse', models.IntegerField(blank=True, choices=[(1, 'ежедневно'), (2, 'раз в два-три дня'), (3, 'раз в неделю'), (4, 'раз в месяц'), (5, 'реже одного раза в месяц')], null=True, verbose_name='Частота употребления алкоголя')),
                ('alcoholDrinksType', models.IntegerField(blank=True, choices=[(1, 'слабоалкогольные'), (2, 'сильноалкогольные')], null=True, verbose_name='Вид алкогольных напитков')),
                ('theTreatmentWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'химическая защита')], null=True, verbose_name='Проходил ли лечение(алкоголь)')),
                ('psychologicalRehabilitationWasA', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Проходил ли психологическую реабилитацию(алкоголь)')),
                ('wherePsyRehWasA', models.TextField(blank=True, null=True, verbose_name='Где проходил реабилитацию(алкоголь)?')),
                ('durationOfRemissionA', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='Длительность ремиссии (в годах)(алкоголь)')),
                ('accountingInNarcologicalClinic', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Учёт в наркологическом диспансере')),
                ('criminalRecord', models.IntegerField(blank=True, choices=[(1, 'условная'), (2, 'отсрочка приговора'), (3, 'из мест лишения свободы'), (4, 'под следствием'), (5, 'нет')], null=True, verbose_name='Наличие судимости')),
                ('accountingInODN_RUVD', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'не знаю')], null=True, verbose_name='Состоит на учёте в ОДН РУВД')),
                ('caseExaminedInKDN_ZP', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет'), (3, 'не знаю')], null=True, verbose_name='Рассматривалось дело на КДН и ЗП')),
                ('dateOfResolutionIPR', models.DateField(blank=True, null=True, verbose_name='Дата постановления ИПР')),
                ('resolutionNumber', models.TextField(blank=True, null=True, verbose_name='Номер постановления')),
                ('DateOfTerminationIPR', models.DateField(blank=True, null=True, verbose_name='Дата прекращения ИПР')),
                ('terminationNumber', models.TextField(blank=True, null=True, verbose_name='Номер прекращения')),
                ('commercialSexExperience', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Опыт коммерческого секса')),
                ('physicalAbuseExperience', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Опыт физического насилия')),
                ('fromHwomPhysical', models.IntegerField(blank=True, choices=[(1, 'муж/партнёр'), (2, 'другого родственника')], null=True, verbose_name='Со стороны кого')),
                ('experienceSexualAbuse', models.IntegerField(blank=True, choices=[(1, 'да'), (2, 'нет')], null=True, verbose_name='Опыт сексуального насилия')),
                ('fromHwomSexual', models.IntegerField(blank=True, choices=[(1, 'муж/партнёр'), (2, 'другого родственника')], null=True, verbose_name='Со стороны кого')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_center_app.client')),
            ],
            options={
                'verbose_name': 'Информация о противоправных действиях, правонарушениях, употреблении наркотиков, алкоголя',
                'verbose_name_plural': 'Информация о противоправных действиях, правонарушениях, употреблении наркотиков, алкоголя',
            },
        ),
    ]
